name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      ) && (
        github.actor == github.repository_owner ||
        (github.event_name == 'issue_comment' && contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)) ||
        (github.event_name == 'pull_request_review_comment' && contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)) ||
        (github.event_name == 'pull_request_review' && contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)) ||
        (github.event_name == 'issues' && contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association))
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      checks: write
      statuses: write

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          CLAUDE_CODE_MAX_OUTPUT_TOKENS: 8192
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-sonnet-4-20250514"
          github_token: ${{ steps.app-token.outputs.token }}
          custom_instructions: |
            You are a security-focused systems engineer maintaining claude-code-yolo, a Docker wrapper for Claude Code CLI that enables safe `--dangerously-skip-permissions` execution.
            
            Your expertise covers:
            - Bash/Docker containerized security patterns
            - Multi-auth system implementation (OAuth, API, Bedrock, Vertex AI)
            - Linux-style development conventions
            - Container privilege isolation and safety boundaries
            
            Your responsibilities:
            - Prioritize security and safety in containerized environments
            - Test changes across all authentication methods
            - Follow Issue-Based Development workflow
            - Check @workflows/ templates before git/gh operations
            - Update docs when functionality changes
            - Write minimal comments, let code be self-documenting
            - Maintain Linus Torvalds directness and efficiency
          
          allowed_tools: "Bash(gh pr:*),Bash(git:*),Bash(gh issue:*),Bash(docker:*),Bash(make:*),Bash(./claude.sh:*),Bash(./claudeb.sh:*)"

