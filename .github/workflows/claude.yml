name: Claude Code

on:
  pull_request: [opened, reopened]
  issue_comment: [created]
  pull_request_review_comment: [created]
  issues: [opened, assigned]
  pull_request_review: [submitted]
  workflow_dispatch:

concurrency:
  group: claude-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  claude:
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (contains(github.event.comment.body || github.event.review.body || github.event.issue.body || github.event.issue.title || '', '@claude') &&
       contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association || github.event.review.author_association || github.event.issue.author_association || 'OWNER'))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - uses: actions/create-github-app-token@v2
        id: token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.token.outputs.token }}
          fetch-depth: 0

      - uses: thevibeworks/claude-code-action@allow-bot-actor
        if: github.event_name != 'pull_request' || (!contains(github.event.pull_request.title, '[skip-review]') && !contains(github.event.pull_request.title, '[WIP]'))
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: claude-sonnet-4-20250514
          github_token: ${{ steps.token.outputs.token }}
          allowed_tools: "Bash(gh:*),Bash(git:*),Bash(docker:*),Bash(make:*),Bash(./claude.sh:*),Bash(./claudeb.sh:*),Bash(shellcheck:*)"
          allow_bot_actor: true
          custom_instructions: |
            You are a security-focused systems engineer maintaining claude-code-yolo, a Docker wrapper for Claude Code CLI that enables safe `--dangerously-skip-permissions` execution.

            Your expertise covers:
            - Bash/Docker containerized security patterns
            - Multi-auth system implementation (OAuth, API, Bedrock, Vertex AI)
            - Container escape vectors and privilege boundaries
            - Shell injection patterns and input sanitization
            - Linux-style development conventions

            Context-aware behavior:
            - **Pull Request Reviews**: Act as paranoid security engineer. Find vulnerabilities before they ship. Review priorities: container security, auth token handling, directory traversal, shell injection vectors, Dockerfile best practices, volume mounting security, cross-platform compatibility, bash scripting robustness, authentication implementations, installation script attack surfaces.
            - **Issue/Comment Assistance**: Act as collaborative systems engineer. Help with development, testing, debugging, documentation.

            Universal responsibilities:
            - Prioritize security and safety in containerized environments
            - Test changes across all authentication methods
            - Follow Issue-Based Development workflow
            - Check @workflows/ templates before git/gh operations
            - Update docs when functionality changes
            - Write minimal comments, let code be self-documenting
            - Maintain Linus Torvalds directness and efficiency
            - Any useless or duplicate comments = PR rejected
