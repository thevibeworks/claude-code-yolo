#!/bin/bash
# Claude YOLO - Quick wrapper for claude.sh --yolo with container inspection shortcuts
# Provides safe Docker-based Claude Code execution with full permissions

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLAUDE_SH="$SCRIPT_DIR/claude.sh"

if [ ! -f "$CLAUDE_SH" ]; then
    echo "Error: claude.sh not found at $CLAUDE_SH" >&2
    echo "Make sure you're running this from the claude-code-yolo directory" >&2
    exit 1
fi

if [ ! -x "$CLAUDE_SH" ]; then
    echo "Error: claude.sh is not executable" >&2
    echo "Run: chmod +x $CLAUDE_SH" >&2
    exit 1
fi

CURRENT_DIR="$(pwd)"
CURRENT_DIR_BASENAME="$(basename "$CURRENT_DIR")"
CONTAINER_PATTERN="ccyolo-${CURRENT_DIR_BASENAME}-"

find_project_containers() {
    docker ps --filter "name=$CONTAINER_PATTERN" --format "{{.Names}}" 2>/dev/null
}

inspect_container() {
    local containers=$(find_project_containers)
    if [ -z "$containers" ]; then
        echo "No running containers found for this project"
        echo "Pattern: $CONTAINER_PATTERN*"
        exit 1
    fi

    local container_array=($containers)
    local num_containers=${#container_array[@]}

    if [ $num_containers -eq 1 ]; then
        local container="${container_array[0]}"
        echo "Entering container $container as claude user..."
        exec docker exec -it "$container" gosu claude /bin/zsh
    else
        echo "Multiple containers found for this project:"
        echo ""
        for i in "${!container_array[@]}"; do
            local container="${container_array[$i]}"
            local status=$(docker ps --filter "name=$container" --format "{{.Status}}")
            echo "  $((i + 1))) $container ($status)"
        done
        echo ""
        echo -n "Select container to inspect (1-$num_containers): "
        read -r choice

        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $num_containers ]; then
            local selected_container="${container_array[$((choice - 1))]}"
            echo "Entering container $selected_container as claude user..."
            exec docker exec -it "$selected_container" gosu claude /bin/zsh
        else
            echo "Invalid selection. Exiting."
            exit 1
        fi
    fi
}

list_containers() {
    echo "Containers for this project:"
    docker ps --filter "name=$CONTAINER_PATTERN" --format "table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}"
}

parse_args() {
    local claude_args=()

    while [ $# -gt 0 ]; do
        case "$1" in
        -v)
            if [ -z "$2" ]; then
                echo "Error: -v requires an argument" >&2
                exit 1
            fi
            claude_args+=("-v" "$2")
            shift 2
            ;;
        -e)
            if [ -z "$2" ]; then
                echo "Error: -e requires an argument" >&2
                exit 1
            fi
            claude_args+=("-e" "$2")
            shift 2
            ;;
        --inspect)
            inspect_container
            # inspect_container calls exec, but add shift for safety
            shift
            ;;
        --ps)
            list_containers
            exit 0
            ;;
        --config | -c)
            if [ -z "$2" ]; then
                echo "Error: --config requires an argument" >&2
                exit 1
            fi
            claude_args+=("--config" "$2")
            shift 2
            ;;
        --host-net)
            claude_args+=("--host-net")
            shift
            ;;
        --help | -h)
            echo "Claude YOLO - Container Shortcuts"
            echo ""
            echo "Usage: claude-yolo [options] [claude-arguments...]"
            echo ""
            echo "Container Inspection:"
            echo "  --inspect     Enter running container as claude user"
            echo "  --ps          List containers for this project"
            echo ""
            echo "Configuration:"
            echo "  --config DIR  Use custom Claude config home instead of ~/.claude, ~/.claude.json "
            echo "  -c DIR        Creates directory and .claude.json if they don't exist"
            echo ""
            echo "Volume Mounting:"
            echo "  -v            Mount volume (Docker syntax: source:target[:options])"
            echo "                Can be used multiple times"
            echo ""
            echo "Environment Variables:"
            echo "  -e VAR=value  Set environment variable explicitly"
            echo "  -e VAR        Pass environment variable from shell"
            echo "                Can be used multiple times"
            echo ""
            echo "Network Options:"
            echo "  --host-net    Enable full host network access (access internal hosts)"
            echo ""
            echo "Examples:"
            echo "  claude-yolo                                          # Run Claude in YOLO mode"
            echo "  CCYOLO_DOCKER_IMAGE=custom-image claude-yolo        # Use custom image"
            echo "  claude-yolo --inspect                               # Quick access to running container"
            echo "  claude-yolo --ps                                    # See project containers"
            echo "  claude-yolo -v ~/.gitconfig:/home/claude/.gitconfig # Mount git config"
            echo "  claude-yolo -v ~/.ssh:/home/claude/.ssh:ro          # Mount SSH keys read-only"
            echo "  claude-yolo -v ~/tools:/tools -v ~/data:/data       # Multiple mounts"
            echo "  claude-yolo --config ~/work-claude                  # Custom config home"
            echo "  claude-yolo -e NODE_ENV=dev -e DEBUG                # Set env vars"
            echo "  export API_KEY=xyz; claude-yolo -e API_KEY          # Pass from shell"
            echo "  claude-yolo --host-net                               # Access internal hosts (10.x.x.x etc)"
            exit 0
            ;;
        *)
            claude_args+=("$1")
            shift
            ;;
        esac
    done

    exec "$CLAUDE_SH" --yolo "${claude_args[@]}"
}

parse_args "$@"
